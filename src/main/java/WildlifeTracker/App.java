/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package WildlifeTracker;
import spark.ModelAndView;
import java.util.HashMap;
import java.util.Map;
import spark.template.velocity.VelocityTemplateEngine;

import static spark.Spark.*;

public class App {

    public static void main(String[] args) {
        staticFileLocation("/public");
        String layout = "templates/layout.vtl";

        get("/", (request, response) -> {
            Map<String, Object>model = new HashMap<>();

            model.put("template", "templates/index.vtl");
            return new ModelAndView(model, layout);
        }, new VelocityTemplateEngine());

        get("/animals/new", (request, response) -> {
            Map<String, Object> model = new HashMap<>();
            model.put("template", "templates/animal-form.vtl");
            return new ModelAndView(model, layout);
        }, new VelocityTemplateEngine());

        post("/animals", (request, response) -> {
            boolean endangered = request.queryParams("endangered")!=null;
            if (endangered) {
                String name = request.queryParams("name");
                String health = request.queryParams("health");
                String age = request.queryParams("age");
                EndangeredAnimal endangeredAnimal = new EndangeredAnimal(name, health, age);
                endangeredAnimal.save();
            } else {
                String name = request.queryParams("name");
                Animals animal = new Animals(name);
                animal.save();
            }
            response.redirect("/");
            return null;
        });

        get("/animals", (request, response) -> {
            Map<String, Object> model = new HashMap<>();
            model.put("animals", Animals.all());
            model.put("endangeredAnimals", EndangeredAnimal.all());
            model.put("template", "templates/animals.vtl");
            return new ModelAndView(model, layout);
        }, new VelocityTemplateEngine());

        get("/sightings", (request, response) -> {
            Map<String, Object> model = new HashMap<>();
            model.put("animals", Animals.all());
            model.put("endangeredAnimals", EndangeredAnimal.all());
            model.put("template", "templates/sightings.vtl");
            return new ModelAndView(model, layout);
        }, new VelocityTemplateEngine());

        get("/endangeredAnimals/:id", (request, response) -> {
            Map<String, Object> model = new HashMap<>();
            EndangeredAnimal endangeredAnimal = EndangeredAnimal.find(Integer.parseInt(request.params(":id")));
            model.put("endangeredAnimal", endangeredAnimal);
            model.put("template", "templates/endangeredAnimal.vtl");
            return new ModelAndView(model, layout);
        }, new VelocityTemplateEngine());

        post("/endangeredAnimals", (request, response) -> {
            Map<String, Object> model = new HashMap<>();
            String location = request.queryParams("location");
            String ranger = request.queryParams("ranger");
            String health = request.queryParams("health");
            String age = request.queryParams("age");
            int animalId = Integer.parseInt(request.queryParams("endangeredAnimalSelected"));
            Sightings sighting = new Sightings(ranger, location, animalId, health, age);
            sighting.save();

            model.put("sighting", sighting);
            model.put("animals", EndangeredAnimal.all());

            String animal = EndangeredAnimal.find(animalId).getName();
            model.put("animal", animal);
            response.redirect("/");
            return null;
        });

        get("/endangeredAnimal/:id", (request, response) -> {
            Map<String, Object>model = new HashMap<>();
            EndangeredAnimal endangeredAnimal = EndangeredAnimal.find(Integer.parseInt(request.params(":id")));
            model.put("endangeredAnimal", endangeredAnimal);
            model.put("template", "templates/endangeredAnimal.vtl");
            return new ModelAndView(model, layout);
        }, new VelocityTemplateEngine());




    }
}
